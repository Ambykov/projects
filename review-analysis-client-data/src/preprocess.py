# src/preprocess.py

import pandas as pd
import os
import logging
from data_loader import load_data
from config import logger, SAVE_STEP_1_RESULT, PROCESSED_DIR, TIMESTAMP
from decorators import pipeline_step


def preprocess_reviews(df):
    """
    –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –æ—Ç–∑—ã–≤–∞–º–∏.
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å–æ —Å—Ç–∞—Ä—ã–º, —Ç–∞–∫ –∏ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö.
    """

    if df is None:
        logger.error("‚ùå [preprocess_reviews] –í—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Ä–∞–≤–µ–Ω None")
        return None

    df = df.copy()

    # --- –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ ---
    df['–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏'] = df.index + 1

    # --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É ---
    for col in ['–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞', '–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏']:
        if col in df.columns:
            df[col] = df[col].apply(
                lambda x: '' if not isinstance(x, str) or pd.isna(x) else x
            )

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –æ—Ç–∑—ã–≤ ---
    df['–û—Ç–∑—ã–≤'] = (
        df['–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞'].fillna('') + " " +
        df['–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞'].fillna('') + " " +
        df['–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏'].fillna('')
    ).str.replace(r'\s+', ' ', regex=True).str.strip()

    # --- –ü—Ä–æ–¥–∞–≤–µ—Ü ---
    if '–ü—Ä–æ–¥–∞–≤–µ—Ü' in df.columns:
        df['–ü—Ä–æ–¥–∞–≤–µ—Ü'] = df['–ü—Ä–æ–¥–∞–≤–µ—Ü'].fillna('–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    else:
        df['–ü—Ä–æ–¥–∞–≤–µ—Ü'] = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'

    return df


@pipeline_step(step_number=1, step_name="–ó–ê–ì–†–£–ó–ö–ê –ò –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê")
def preprocess_reviews_with_loading(input_df=None, stop_pipeline_flag=False, step_number=1):
    """
    –ü–æ–ª–Ω—ã–π —à–∞–≥ [1]: –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py —á–µ—Ä–µ–∑ PIPELINE_STEPS
    """

    if stop_pipeline_flag:
        logger.warning(f"üîö [INTERRUPT] –®–∞–≥ [{step_number}] –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return None

    try:
        if input_df is None:
            df = load_data()
        else:
            df = input_df.copy()

        if df is None:
            raise ValueError(f"‚ùå [{step_number}] –í—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Ä–∞–≤–µ–Ω None")

        # --- –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
        df_processed = preprocess_reviews(df)

        if df_processed is None:
            logger.error(f"‚ùå [{step_number}] –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–Ω—É–ª–∞ None ‚Üí –ø—Ä–µ—Ä—ã–≤–∞–µ–º —à–∞–≥")
            return None

        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
        from config import SAVE_STEP_1_RESULT, PROCESSED_DIR, TIMESTAMP

        if SAVE_STEP_1_RESULT:
            output_file = os.path.join(PROCESSED_DIR, f"step_{step_number}_final_{TIMESTAMP}.xlsx")
            df_processed.to_excel(output_file, index=False)
            logger.info(f"üìå [{step_number}] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_file}")

        logger.info(f"‚úÖ [{step_number}] –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df_processed)} —Å—Ç—Ä–æ–∫")
        return df_processed

    except Exception as e:
        logger.error(f"‚ùå [{step_number}] –û—à–∏–±–∫–∞ –≤ preprocess_reviews_with_loading ‚Äî {e}")
        return None
