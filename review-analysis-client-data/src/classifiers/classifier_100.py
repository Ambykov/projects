# src/classifiers/classifier_100.py

import logging
import pandas as pd
import re
import os
from tqdm import tqdm

from utils import set_class, class_statistics
from decorators import pipeline_step
from config import logger, SAVE_STEP_3_RESULT, PROCESSED_DIR, TIMESTAMP, FILTERED_OUT_CLASS, CLASS_100

logger = logging.getLogger('pipeline')


def is_empty_review(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–∑—ã–≤ –ø—É—Å—Ç—ã–º –∏–ª–∏ NaN"""
    if pd.isna(text) or not isinstance(text, str):
        return True
    text = text.strip()
    return len(text) == 0


def is_foreign_language(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞–ø–∏—Å–∞–Ω –ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ (–Ω–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)"""
    if not isinstance(text, str) or not text.strip():
        return False

    cyrillic_pattern = re.compile(r'[–∞-—è–ê-–Ø—ë–Å]')
    return not bool(cyrillic_pattern.search(text))


def is_short_symbol(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º (1‚Äì3 —Å–∏–º–≤–æ–ª–∞), –Ω–æ –Ω–µ '–±—É'"""
    if not isinstance(text, str) or not text.strip():
        return False

    text = text.strip()

    # –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –º–µ–∂–¥—É –±—É–∫–≤–∞–º–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª
    normalized = re.sub(r'(?<=[–∞-—è–ê-–Ø])([^\w\s\/])(?=[–∞-—è–ê-–Ø])', ' ', text)
    normalized = re.sub(r'\s+', ' ', normalized).strip()

    if not (1 <= len(normalized) <= 3):
        return False

    if normalized.isspace():
        return False

    cleaned_words = normalized.lower().replace(' ', '').replace('/', '')
    if cleaned_words == '–±—É':
        return False

    return True


def _add_class_and_note(df, idx, class_code, note):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –¥–æ–ø–∏—Å—ã–≤–∞—è –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ"""
    df = set_class(df, idx, class_code)
    old_note = df.at[idx, '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'] if '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ' in df.columns else ''
    if old_note:
        new_note = f"{old_note}; {note}"
    else:
        new_note = note
    df.at[idx, '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'] = new_note
    return df


@pipeline_step(step_number=3, step_name="–ü–†–û–í–ï–†–ö–ê –ù–ê [100]: –ø—É—Å—Ç–æ–π, –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫, –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç")
def classifier_100(df, stop_pipeline_flag=False, step_number=3):
    """
    –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å CLASS_100, –µ—Å–ª–∏:
      - –æ—Ç–∑—ã–≤ –ø—É—Å—Ç–æ–π
      - –æ—Ç–∑—ã–≤ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
      - –æ—Ç–∑—ã–≤ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π (1‚Äì3 —Å–∏–º–≤–æ–ª–∞), –Ω–æ –Ω–µ "–±—É"

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É—é—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ FILTERED_OUT_CLASS.
    –ü—Ä–∏—á–∏–Ω–∞ –ø–æ–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'.
    """

    if stop_pipeline_flag:
        logger.warning("üîö [{step_number}] –®–∞–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return df

    if df is None or df.empty:
        logger.warning(f"üü° [{step_number}] –í—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –ø—É—Å—Ç–æ–π –∏–ª–∏ None")
        return df

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if '–ö–ª–∞—Å—Å' not in df.columns:
        df['–ö–ª–∞—Å—Å'] = [[0] for _ in range(len(df))]
    else:
        def ensure_list(x):
            if isinstance(x, list):
                return x
            elif pd.isna(x):
                return []
            else:
                return [x]
        df['–ö–ª–∞—Å—Å'] = df['–ö–ª–∞—Å—Å'].apply(ensure_list)

    if '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ' not in df.columns:
        df['–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'] = ''

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–∑—ã–≤—ã —Å —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏–º –∫–ª–∞—Å—Å–æ–º
    def has_filtered_class(classes):
        if isinstance(classes, list):
            return FILTERED_OUT_CLASS in classes
        return classes == FILTERED_OUT_CLASS

    df_filtered = df[~df['–ö–ª–∞—Å—Å'].apply(has_filtered_class)]

    empty_count = 0
    foreign_count = 0
    short_count = 0

    for idx, row in tqdm(df_filtered.iterrows(), total=len(df_filtered), desc="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ [100]"):
        review_text = row.get('–û—Ç–∑—ã–≤', '')

        if is_empty_review(review_text):
            df = _add_class_and_note(df, idx, CLASS_100, '–ø—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤')
            empty_count += 1
            continue

        if is_foreign_language(review_text):
            df = _add_class_and_note(df, idx, CLASS_100, '–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫')
            foreign_count += 1
            continue

        if is_short_symbol(review_text):
            df = _add_class_and_note(df, idx, CLASS_100, '–æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç')
            short_count += 1

    logger.info(f"üìä [{step_number}] –ù–∞–π–¥–µ–Ω–æ {empty_count} –ø—É—Å—Ç—ã—Ö –æ—Ç–∑—ã–≤–æ–≤. –ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å [{CLASS_100}]")
    logger.info(f"üåê [{step_number}] –ù–∞–π–¥–µ–Ω–æ {foreign_count} –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ. –ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å [{CLASS_100}]")
    logger.info(f"‚úÇÔ∏è  [{step_number}] –ù–∞–π–¥–µ–Ω–æ {short_count} –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤. –ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å [{CLASS_100}]")

    if SAVE_STEP_3_RESULT:
        try:
            output_file = os.path.join(PROCESSED_DIR, f"step_{step_number}_marked_{TIMESTAMP}.xlsx")
            df.to_excel(output_file, index=False)
            logger.info(f"üìå [{step_number}] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_file}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [{step_number}] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç classifier_100: {e}")

    # --- –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ---
    try:
        stats = class_statistics(df)
        logger.info(f"\nüìä [{step_number}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º –ø–æ—Å–ª–µ classifier_100:\n")
        logger.info(stats.to_string(index=False))
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è [{step_number}] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚Äî {e}")

    return df
