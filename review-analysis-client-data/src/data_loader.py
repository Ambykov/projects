# src/data_loader.py

import pandas as pd
import os
from config import (
    logger,
    FORMAT_1_DATA_PATH,
    FORMAT_2_DATA_PATH,
    FORMAT_3_DATA_PATH,
    SELLER_DEFAULT,
)


def load_format1(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–¥ –æ–±—â–∏–π –≤–∏–¥.
    """
    logger.info(f"üìä [LOAD] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 1 (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç): {file_path}")
    try:
        df = pd.read_excel(file_path)
    except Exception as e:
        logger.error(f"‚ùå [LOAD] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
        raise

    column_mapping = {
        '–û—Ü–µ–Ω–∫–∞': '–û—Ü–µ–Ω–∫–∞',
        '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞': '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞',
        '–ü–ª—é—Å—ã': '–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞',
        '–ú–∏–Ω—É—Å—ã': '–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏',
        '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
        '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–∑—ã–≤–∞': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞',
        '–ü—Ä–æ–¥–∞–≤–µ—Ü': '–ü—Ä–æ–¥–∞–≤–µ—Ü',
        '–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞': '–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞',
        '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
        '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥—É–∫—Ç–∞': '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞'
    }

    available_columns = {k: v for k, v in column_mapping.items() if k in df.columns}
    missing_columns = set(column_mapping.keys()) - set(df.columns)
    if missing_columns:
        logger.warning(f"‚ö†Ô∏è [LOAD] –í –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")

    df = df.copy()
    df = df.rename(columns=available_columns)

    new_columns = {
        'ID –æ—Ç–∑—ã–≤–∞': '–Ω–µ—Ç',
        '–ê—Ä—Ç–∏–∫—É–ª WB': '–Ω–µ—Ç',
        '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å': '–Ω–µ—Ç'
    }
    for col, default in new_columns.items():
        if col not in df.columns:
            df[col] = default

    if '–ü—Ä–æ–¥–∞–≤–µ—Ü' in df.columns:
        df['–ü—Ä–æ–¥–∞–≤–µ—Ü'] = df['–ü—Ä–æ–¥–∞–≤–µ—Ü'].fillna(SELLER_DEFAULT)
    else:
        df['–ü—Ä–æ–¥–∞–≤–µ—Ü'] = SELLER_DEFAULT

    if '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' not in df.columns:
        df['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'] = '–Ω–µ—Ç'
    if '–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞' not in df.columns:
        df['–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞'] = ''
    if '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞' not in df.columns:
        df['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞'] = '–Ω–µ—Ç'

    return df


def load_format2(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–¥ –æ–±—â–∏–π –≤–∏–¥.
    """
    logger.info(f"üìä [LOAD] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 2 (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç): {file_path}")
    try:
        df = pd.read_excel(file_path)
    except Exception as e:
        logger.error(f"‚ùå [LOAD] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
        raise

    needed_columns = {
        'ID –æ—Ç–∑—ã–≤–∞': 'ID –æ—Ç–∑—ã–≤–∞',
        '–î–∞—Ç–∞': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
        '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞': '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞',
        '–ê—Ä—Ç–∏–∫—É–ª WB': '–ê—Ä—Ç–∏–∫—É–ª WB',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥': '–û—Ü–µ–Ω–∫–∞',
        '–ë—Ä–µ–Ω–¥': '–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞',
        '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞': '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞',
        '–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞': '–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏': '–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏',
        '–ò–º—è': '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'
    }

    present_columns = {k: v for k, v in needed_columns.items() if k in df.columns}
    if not present_columns:
        logger.error("‚ùå [LOAD] –ù–∏ –æ–¥–Ω–∞ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        raise ValueError("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")

    df = df[list(present_columns.keys())].rename(columns=needed_columns)

    optional_columns = {
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞': '–Ω–µ—Ç',
        '–ê—Ä—Ç–∏–∫—É–ª WB': '–Ω–µ—Ç',
        '–ü—Ä–æ–¥–∞–≤–µ—Ü': SELLER_DEFAULT,
        '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': '–Ω–µ—Ç'
    }
    for col, default in optional_columns.items():
        if col not in df.columns:
            df[col] = default

    if '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' in df.columns:
        df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].astype(str).str.strip()
        df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = pd.to_datetime(df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'], format='%d/%m/%Y', errors='coerce')
        if df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].isna().any():
            df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = pd.to_datetime(df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'], dayfirst=True, errors='coerce')
        df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].apply(
            lambda x: x.replace(hour=0, minute=1) if pd.notna(x) and isinstance(x, pd.Timestamp) else x
        )

    return df


def load_format3(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç—Ä–µ—Ç—å–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–≤–∞—à —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç),
    –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–¥ –æ–±—â–∏–π –≤–∏–¥ –∏ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –∫–æ–ª–æ–Ω–∫–∞–º,
    —Ç–∞–∫–∂–µ –∑–∞–Ω–æ—Å–∏—Ç –≤ –∫–æ–ª–æ–Ω–∫—É "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞" –¥–∞–Ω–Ω—ã–µ –∏–∑ "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è 3".
    """
    logger.info(f"üìä [LOAD] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 3 (—Ç—Ä–µ—Ç–∏–π —Ñ–æ—Ä–º–∞—Ç): {file_path}")
    try:
        df = pd.read_excel(file_path)
    except Exception as e:
        logger.error(f"‚ùå [LOAD] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
        raise

    column_mapping = {
        '–∏–Ω–¥–µ–∫—Å': 'ID –æ—Ç–∑—ã–≤–∞',
        '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å': '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å',
        '–¥–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
        '–æ—Ü–µ–Ω–∫–∞': '–û—Ü–µ–Ω–∫–∞',
        '–¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞': '–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞',
        '–Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏': '–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏',
        '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞',
        '–≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–æ': '–í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è',
        '–∞—Ä—Ç–∏–∫—É–ª': '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞',
        '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
        '–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è 1': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è 1',
        '–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è 2': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è 2',
        '–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è 3': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è 3',
        '–±—Ä–µ–Ω–¥': '–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞',
        '–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞': '–ü—Ä–æ–¥–∞–≤–µ—Ü'
    }

    available_columns = {k: v for k, v in column_mapping.items() if k in df.columns}
    missing_columns = set(column_mapping.keys()) - set(df.columns)
    if missing_columns:
        logger.warning(f"‚ö†Ô∏è [LOAD] –í –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")

    df = df.copy()
    df = df.rename(columns=available_columns)

    defaults = {
        'ID –æ—Ç–∑—ã–≤–∞': '–Ω–µ—Ç',
        '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å': '–Ω–µ—Ç',
        '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': pd.NaT,
        '–û—Ü–µ–Ω–∫–∞': -1,
        '–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞': '',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏': '',
        '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞': '',
        '–í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è': '',
        '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞': '–Ω–µ—Ç',
        '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': '–Ω–µ—Ç',
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è 1': '–Ω–µ—Ç',
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è 2': '–Ω–µ—Ç',
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è 3': '–Ω–µ—Ç',
        '–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞': '',
        '–ü—Ä–æ–¥–∞–≤–µ—Ü': SELLER_DEFAULT,
    }
    for col, default_value in defaults.items():
        if col not in df.columns:
            df[col] = default_value

    # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞" –¥–∞–Ω–Ω—ã–µ –∏–∑ "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è 3"
    df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞'] = df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è 3']

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
    df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = pd.to_datetime(df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'], errors='coerce')

    df['–ü—Ä–æ–¥–∞–≤–µ—Ü'] = df['–ü—Ä–æ–¥–∞–≤–µ—Ü'].fillna(SELLER_DEFAULT)
    df['–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'] = df['–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'].fillna('–Ω–µ—Ç')
    df['–û—Ü–µ–Ω–∫–∞'] = pd.to_numeric(df['–û—Ü–µ–Ω–∫–∞'], errors='coerce').fillna(-1).astype(int)

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
    subset = ['–ü–æ–∫—É–ø–∞—Ç–µ–ª—å', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞']
    before_count = len(df)
    df = df.drop_duplicates(subset=subset)
    after_count = len(df)
    logger.info(f"üßπ [LOAD] –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º {subset}: {before_count - after_count}")

    return df


def detect_format(file_path):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        'format1' ‚Äî —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        'format2' ‚Äî –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        'format3' ‚Äî —Ç—Ä–µ—Ç–∏–π —Ñ–æ—Ä–º–∞—Ç
    """
    try:
        df_sample = pd.read_excel(file_path, nrows=1)
        columns = set(df_sample.columns)

        if {'–û—Ü–µ–Ω–∫–∞', '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞', '–ü–ª—é—Å—ã', '–ú–∏–Ω—É—Å—ã', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'}.issubset(columns):
            return 'format1'
        elif {'ID –æ—Ç–∑—ã–≤–∞', '–î–∞—Ç–∞', '–ê—Ä—Ç–∏–∫—É–ª WB', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥', '–ò–º—è'}.issubset(columns):
            return 'format2'
        elif {'–∏–Ω–¥–µ–∫—Å', '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å', '–¥–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞', '–æ—Ü–µ–Ω–∫–∞', '–¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞'}.issubset(columns):
            return 'format3'
        else:
            logger.warning(f"‚ö†Ô∏è [LOAD] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_path}")
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_path}")
    except Exception as e:
        logger.error(f"‚ùå [LOAD] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ ‚Äî {e}")
        raise


def load_data():
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logger.info("üîÑ [1] –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•: –Ω–∞—á–∞—Ç–∞")

    if os.path.exists(FORMAT_1_DATA_PATH):
        file_to_load = FORMAT_1_DATA_PATH
        data_format = detect_format(file_to_load)

        if data_format == 'format1':
            df = load_format1(file_to_load)
            logger.info(f"‚úÖ [LOAD] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Ñ–æ—Ä–º–∞—Ç–æ–º 1, —Å—Ç—Ä–æ–∫: {len(df)}")
            return df
        else:
            logger.warning(f"‚ö†Ô∏è [LOAD] –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file_to_load} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º {data_format}")
            raise ValueError(f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file_to_load} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")

    elif os.path.exists(FORMAT_2_DATA_PATH):
        file_to_load = FORMAT_2_DATA_PATH
        data_format = detect_format(file_to_load)

        if data_format == 'format2':
            df = load_format2(file_to_load)
            logger.info(f"‚úÖ [LOAD] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Ñ–æ—Ä–º–∞—Ç–æ–º 2, —Å—Ç—Ä–æ–∫: {len(df)}")
            return df
        else:
            logger.warning(f"‚ö†Ô∏è [LOAD] –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file_to_load} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º {data_format}")
            raise ValueError(f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file_to_load} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")

    elif os.path.exists(FORMAT_3_DATA_PATH):
        file_to_load = FORMAT_3_DATA_PATH
        data_format = detect_format(file_to_load)

        if data_format == 'format3':
            df = load_format3(file_to_load)
            logger.info(f"‚úÖ [LOAD] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Ñ–æ—Ä–º–∞—Ç–æ–º 3, —Å—Ç—Ä–æ–∫: {len(df)}")
            return df
        else:
            logger.warning(f"‚ö†Ô∏è [LOAD] –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file_to_load} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º {data_format}")
            raise ValueError(f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file_to_load} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")

    else:
        logger.error(f"‚ùå [1] –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•: –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data/")
        raise FileNotFoundError("–ù–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data/")
