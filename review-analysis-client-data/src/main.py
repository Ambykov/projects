# src/main.py

import sys
import os
import signal
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É ---
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(PROJECT_ROOT)

# --- –õ–æ–≥–≥–µ—Ä ---
logger = logging.getLogger('pipeline')

# --- –ò–º–ø–æ—Ä—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ ---
from preprocess import preprocess_reviews_with_loading
from classifiers.classifier_0 import classifier_0
from classifiers.classifier_100 import classifier_100
from classifiers.classifier_200 import classifier_200
from classifiers.classifier_201 import classifier_201
from classifiers.classifier_202 import classifier_202
from classifiers.classifier_300 import classifier_300
from classifiers.classifier_500 import classifier_500
from classifiers.classifier_700 import classifier_700
from classifiers.classifier_701 import classifier_701
from classifiers.classifier_result import classifier_result



#--- –ò–º–ø–æ—Ä—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é –æ—Ü–µ–Ω–∫–∏ ---
from utils import filter_by_negativ_level
from utils import step_clean_text

# --- –§–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è ---
stop_pipeline = False


class PipelineInterruptError(Exception):
    pass


def signal_handler(sig, frame):
    global stop_pipeline
    logger.warning("üõë [INTERRUPT] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Ctrl+C)")
    stop_pipeline = True
    raise PipelineInterruptError()


signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


# --- –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ ---
PIPELINE_STEPS = [
    {
        "name": "–ó–ê–ì–†–£–ó–ö–ê –ò –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê",
        "function": preprocess_reviews_with_loading,
        "step_number": 1,
        "enabled": True,
        "log_message": "‚öôÔ∏è  [1] –ó–ê–ì–†–£–ó–ö–ê –ò –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: —Å—Ç–∞—Ä—Ç - –∏–∑ main"
    },
    {
        "name": "–ù–ê–ß–ê–õ–¨–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø",
        "function": classifier_0,
        "step_number": 2,
        "enabled": True,
        "log_message": "üè∑Ô∏è  [2] –ù–ê–ß–ê–õ–¨–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø: —Å—Ç–∞—Ä—Ç"
    },
    {
        "name": "–ü–†–û–í–ï–†–ö–ê –ù–ê [100]",
        "function": classifier_100,
        "step_number": 3,
        "enabled": True,
        "save_flag": "SAVE_STEP_3_RESULT",
        "log_message": "üîç  [3] –ü–†–û–í–ï–†–ö–ê –ù–ê [100]: —Å—Ç–∞—Ä—Ç"
    },
     {
        "name": "–ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† [200] ‚Äî –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∞–π—Ç—ã –∏ —Å–æ—Ü—Å–µ—Ç–∏",
        "function": classifier_200,
        "step_number": 4,
        "enabled": True,
        "save_flag": "SAVE_STEP_4_RESULT",
        "log_message": "üîç  [4] –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† [200]: —Å—Ç–∞—Ä—Ç"
    },
    {
        "name": "–ü–û–ò–°–ö –î–£–ë–õ–ò–ö–ê–¢–û–í ‚Üí [300] –°–ü–ê–ú",
        "function": classifier_300,
        "step_number": 5,
        "enabled": True,
        "save_flag": "SAVE_STEP_5_RESULT",
        "log_message": "üóÇÔ∏è  [5] –ü–û–ò–°–ö –î–£–ë–õ–ò–ö–ê–¢–û–í: —Å—Ç–∞—Ä—Ç"
    },
    {
        "name": "–ü–û–ò–°–ö –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú ‚Üí [500] –ù–ï–¶–ï–ù–¶–£–†–ù–ê–Ø –õ–ï–ö–°–ò–ö–ê",
        "function": classifier_500,
        "step_number": 6,
        "enabled": True,
        "save_flag": "SAVE_STEP_6_RESULT",
        "log_message": "üîë  [6] –ü–û–ò–°–ö –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú [500]: —Å—Ç–∞—Ä—Ç"
    },
    {
        "name": "–û–ß–ò–°–¢–ö–ê –¢–ï–ö–°–¢–ê",
        "function": step_clean_text,
        "step_number": 7,
        "enabled": True,
        "save_flag": "SAVE_STEP_7_RESULT",
        "log_message": "üßπ  [7] –û–ß–ò–°–¢–ö–ê –¢–ï–ö–°–¢–ê: —Å—Ç–∞—Ä—Ç"
    },
    {
        "name": "–ü–û–ò–°–ö –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú [201] - –ë/–£",
        "function": classifier_201,
        "step_number": 8,
        "enabled": True,
        "save_flag": "SAVE_STEP_8_RESULT",
        "log_message": "üîç  [8] –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† [201]: —Å—Ç–∞—Ä—Ç"
    },
    {
        "name": "–ü–û–ò–°–ö –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–• –û–¢–ó–´–í–û–í –° –ù–ï–ì–ê–¢–ò–í–ù–û–ô –û–¶–ï–ù–ö–û–ô‚Üí [202]",
        "function": classifier_202,
        "step_number": 9,
        "enabled": True,
        "save_flag": "SAVE_STEP_9_RESULT",
        "log_message": "üîç  [9] –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† [202]: —Å—Ç–∞—Ä—Ç"
    },
    {
        "name": "–ü–û–ò–°–ö –ü–û–õ–ò–¢. –ö–û–ù–¢–ï–ù–¢–ê –ü–û –ö–õ–Æ–ß–ï–í–´–ú –§–†–ê–ó–ê–ú [700]",
        "function": classifier_700,
        "step_number": 10,
        "enabled": True,
        "save_flag": "SAVE_STEP_10_RESULT",
        "log_message": "üß†  [10] –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† [700]: —Å—Ç–∞—Ä—Ç"
    },
    {
        "name": "–ü–û–ò–°–ö –ü–û–õ–ò–¢. –ö–û–ù–¢–ï–ù–¢–ê –ú–û–î–ï–õ–¨–Æ [701]",
        "function": classifier_701,
        "step_number": 11,
        "enabled": True,
        "save_flag": "SAVE_STEP_11_RESULT",
        "log_message": "üß†  [11] –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† [701]: —Å—Ç–∞—Ä—Ç"
    },
    {
        "name": "–ò–¢–û–ì–û–í–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø ‚Äî –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† RESULT",
        "function": classifier_result,
        "step_number": 12,
        "enabled": True,
        "save_flag": "SAVE_STEP_12_RESULT",
        "log_message": "üè∑Ô∏è  [12] –ò—Ç–æ–≥–æ–≤—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä RESULT: —Å—Ç–∞—Ä—Ç"
    },
]


def run_pipeline():
    logger.info("üîµ üîÅ === –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ === üîÅ üîµ")

    result_df = None

    for step in PIPELINE_STEPS:
        if not step["enabled"]:
            logger.warning(f"üü° [!] –®–∞–≥ [{step['step_number']}] {step['name']} –æ—Ç–∫–ª—é—á—ë–Ω")
            continue

        if stop_pipeline:
            logger.critical("‚õî [!] –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break

        logger.info(step["log_message"])

        try:
            result_df = step["function"](result_df, stop_pipeline_flag=stop_pipeline)

            if result_df is None:
                logger.critical(f"‚õî [!] –®–∞–≥ [{step['step_number']}] {step['name']} –≤–µ—Ä–Ω—É–ª None ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                break

            logger.info(f"‚úÖ [{step['step_number']}] {step['name']}: —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")

        except PipelineInterruptError:
            logger.critical("‚õî [!] –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break

        except Exception as e:
            logger.error(f"‚ùå [{step['step_number']}] –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step['name']} ‚Äî {e}")
            logger.critical(f"‚õî [!] –®–∞–≥ [{step['step_number']}] {step['name']} –ø—Ä–µ—Ä–≤–∞–Ω. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            break

    logger.info("üü¢ üéâ === –ü–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω === üéâ üü¢")


if __name__ == "__main__":
    run_pipeline()