# src/decorators.py

import logging
from functools import wraps

# –°–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("pipeline.decorators")


def pipeline_step(step_number, step_name, log_start=True, log_result=True):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —à–∞–≥–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞

    :param step_number: –Ω–æ–º–µ—Ä —à–∞–≥–∞
    :param step_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞
    :param log_start: –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª–æ
    :param log_result: –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """

    def decorator(func):
        @wraps(func)
        def wrapper(*args, stop_pipeline_flag=False, **kwargs):
            if stop_pipeline_flag:
                logger.warning(f"üîö [INTERRUPT] –ü—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞ [{step_number}] {step_name} ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return None

            try:
                result = func(*args, stop_pipeline_flag=stop_pipeline_flag, **kwargs)
                return result

            except Exception as e:
                logger.error(f"‚ùå [{step_number}] {step_name}: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ ‚Äî {e}")
                return None

        return wrapper

    return decorator