# src/classifiers/classifier_202.py

import os
import pandas as pd
from tqdm import tqdm

from utils import set_class, class_statistics, is_fuzzy_match_with_details
from decorators import pipeline_step
from config import (
    logger,
    SAVE_STEP_9_RESULT,
    PROCESSED_DIR,
    TIMESTAMP,
    FILTERED_OUT_CLASS,
    CLASS_100,
)

from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch


MODEL_NAME = "blanchefort/rubert-base-cased-sentiment"  # –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å

tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForSequenceClassification.from_pretrained(MODEL_NAME)
model.eval()
if torch.cuda.is_available():
    model.to("cuda")


NEGATIVE_KEY_PHRASES = [
    "–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é",
    "–Ω–µ —Å–æ–≤–µ—Ç—É—é",
    "–Ω–µ —Å—Ç–æ–∏—Ç",
    '–Ω–µ –ø–æ–∫—É–ø–∞–π—Ç–µ',
    '–≤—ã–±—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏',
    '–¥–µ–Ω—å–≥–∏ –Ω–∞ –≤–µ—Ç–µ—Ä',
    '—Å–∫—É–ø–æ–π –ø–ª–∞—Ç–∏—Ç –¥–≤–∞–∂–¥—ã',
    '–Ω–µ –±–µ—Ä–∏—Ç–µ',

    "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω",
    '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∞',
    "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ",
    "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–ª—Å—è",
    '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–ª–∞',
    '—Ä–∞—Å—Å—Ç–æ—Ä–µ–Ω',
    '—Ä–∞—Å—Å—Ç–æ—Ä–æ–µ–Ω–∞',
    '—Ä–∞—Å—Å—Ç—Ä–æ–∏–ª',
    '—Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–∞',
    '—Ä–∞—Å—Å—Ç–æ—Ä–æ–∏–ª–æ',
    '–æ–±–∏–¥–Ω–æ',
    '–¥–æ—Å–∞–¥–Ω–æ',
    '–Ω–µ–ø—Ä–∏—è—Ç–Ω–æ',
    '–ø–µ—á–∞–ª—å–Ω–æ',
    '–∂–∞–ª—å',
    '–æ–±–∏–¥–Ω–æ',
    '–æ–≥–æ—Ä—á–µ–Ω–∞',
    '–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é',
    '–Ω–æ —Å–ø—É—Å—Ç—è',
    '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è',
    '–ø–æ–∂–∞–ª–µ–ª–∞ —á—Ç–æ –∫—É–ø–∏–ª–∞',
    '—Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–∞—Å—å',
    '–Ω–µ —Å–º–æ–≥–ª–∞',
    '–Ω–µ —Å–º–æ–≥',
    '–æ–∂–∏–¥–∞–ª–∞ –¥—Ä—É–≥–æ–≥–æ',
    '–Ω–µ –æ–∂–∏–¥–∞–ª–∞',
    '–Ω–µ –¥–æ–≤–æ–ª—å–Ω–∞',
    '–Ω–µ–¥–æ–≤–æ–ª—å–Ω–∞',
    '–≥–¥–µ –≥–∞—Ä–∞–Ω—Ç–∏—è',
    '–Ω–µ –ø–æ–≤–µ–∑–ª–æ',
    '–æ–±–º–∞–Ω—É–ª–∏',
    '–∞–±—Å—É—Ä–¥–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ',
    '–Ω–µ –¥–µ–ª–∞–ª–∞',
    '–Ω–µ –¥–µ–ª–∞–ª',
    '–Ω–µ –¥–µ–ª–∞–ª–∏',
    '–Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏',
    '–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å',
    '–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è',
    '–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å',
    '–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å',

    "—É–∂–∞—Å–Ω—ã–π",
    '—É–∂–∞—Å',
    '—É–∂–∞—Å–µ–Ω',
    "—Ö—É–¥—à–∏–π",
    '—Ö—É–¥–æ',
    "–ø–ª–æ—Ö–æ",
    '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω—ã–π',
    '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ',
    "–Ω–µ–Ω–∞–≤–∏–∂—É",
    '–∫–æ—à–º–∞—Ä',
    '–ª–∞–∂–∞',
    '—Ñ–∏–≥–Ω—è',
    '—Ñ–∏–≥–Ω–µ–π',
    '—Ñ–∏–≥–æ–≤–æ',
    '–≥–∞–¥–æ—Å—Ç—å',
    '–±–µ–¥–∞',
    '–∂—É—Ç—å',
    '–æ—Ç–∫–∞–∑',
    '–æ–±–º–∞–Ω',
    '–ø–æ–¥–ª–æ',
    '—Ä–∞–∑–≤–æ–¥',
    '–∏—Å–ø–æ—Ä—á–µ–Ω–æ',
    '–¥–µ—Ñ–µ–∫—Ç',
    '–Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑',
    '—Å—Ç—Ä–∞—à–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å',
    "–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
    "–≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞",
    '–Ω–æ –≤–Ω–∏–º–∞–Ω–∏–µ',
    '–æ–±–º–∞–Ω—ã–≤–∞–µ—Ç',

    "–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è",
    '–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å',
    '–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç',
    '–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç',
    "–Ω–µ —Å–º–æ–≥ –æ—Ü–µ–Ω–∏—Ç—å",
    '–æ—Ç–∫–∞–∑–∞–ª—Å—è',
    '–≤–æ–∑–≤—Ä–∞—Ç',
    '–≤–µ—Ä–Ω—É–ª',
    '–≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ',
    '–ø—Ä–∏–¥–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å',
    '–∑–∞–±–∏—Ä–∞—Ç—å –Ω–µ –±—É–¥—É',
    '–Ω–µ –∑–∞–±—Ä–∞–ª–∞',
    '–Ω–µ –ø–æ–¥–æ—à–ª–∞',
    '–±–æ–ª—å—à–µ –±—Ä–∞—Ç—å –Ω–µ –±—É–¥—É',
    '–≤ —Ñ—É—Ç–±–æ–ª –∏–≥—Ä–∞–ª–∏',
    '–Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª',
    '–Ω–µ –ø–æ–Ω—è—Ç–Ω–æ',

    "–Ω–µ –ø—Ä–∏–≤–µ–∑–ª–∏",
    "–Ω–µ –¥–æ–µ—Ö–∞–ª",
    '–Ω–µ –¥–æ—Å—Ç–∞–≤–∏–ª–∏',
    '–ø–æ—Ç–µ—Ä—è–ª–∏',
    '–¥–æ—Å—Ç–∞–≤–∫—É –∑–∞–¥–µ—Ä–∂–∞–ª–∏',
    '–¥–æ–ª–≥–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞',
    '–Ω–æ –¥–æ—Å—Ç–∞–≤–∫–∞',
    '–≤–º–µ—Å—Ç–æ –Ω–µ–µ',
    '–Ω–µ —Ç–æ—Ç',
    '–Ω–µ —Ç–æ–≥–æ',

    '–ø–æ–º—è–ª–∏',
    '–º—è—Ç–∞—è',
    '–º—è—Ç—ã–π',
    '–º—è—Ç–æ–µ',
    '–º—è—Ç—ã–µ',
    '–≤—Å–∫—Ä—ã—Ç–∞—è',
    '–±–µ–∑ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏',
    '–Ω–µ –±—ã–ª–∞ –≤ –∫–æ—Ä–æ–±–∫–µ',
    '–±–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏',
    '–±–µ–∑ –∫–æ—Ä–æ–±–∫–∏',
    '–≤ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–µ',
    '–Ω–µ –±—ã–ª–æ',
    '–Ω–µ–±—ã–ª–æ',

    '–ø—Ä–∏—à–ª–∞ –±–µ–∑ –∫—Ä—ã—à–∫–∏',
    '–ø—Ä–∏—à–µ–ª –±–µ–∑',
    '–ø—Ä–∏—à–ª–∏ –±–µ–∑',
    '–ø—Ä–∏—Å–ª–∞–ª–∏ –±–µ–∑',
    '–≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ –Ω–µ –±—ã–ª–æ',
    '–Ω–µ –∫–æ–º–ø–ª–µ–∫—Ç',
    '–Ω–µ –≤ –ø–æ–ª–Ω–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏',
    '–±–µ–∑ –Ω–æ–∂–∞',
    '–Ω–µ—Ç –∫–Ω–æ–ø–∫–∏',
    '–ø—Ä–∏—Å–ª–∞–ª–∏ –∫–∞–∫—É—é —Ç–æ',
    '–ø—Ä–∏—Å–ª–∞–ª–∏ –∫–∞–∫—É—é-—Ç–æ',
    '–Ω–µ—Ç –Ω–∏ –∫–∞–∫–æ–≥–æ',
    '–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç',

    '–∑–∞–±—Ä–∞–∫–æ–≤–∞–ª–∏',
    '–≤–∑–æ—Ä–≤–∞–ª–∞—Å—å',
    '–ø—Ä–∏–≥–æ—Ä–µ–ª–∞',
    '–ø—Ä–∏–≥–æ—Ä–∞–µ—Ç',
    '–ø—Ä–æ—Ç–µ–∫–∞–µ—Ç',
    '–≤—ã—à–µ–ª –∏–∑ —Å—Ç—Ä–æ—è',
    '–Ω–µ –¥–æ–ª–≥–æ –ø—Ä–æ—Å–ª—É–∂–∏–ª–∞',
    '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
    '—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —Ä–∞–∑',
    '–Ω–µ –ø–æ—Ä–∞–±–æ—Ç–∞–ª',
    '–ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å',
    '–Ω–µ –Ω–∞–∂–∏–º–∞—é—Ç—Å—è',
    '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞',
    '–¥—ã–º–∏—Ç—Å—è',
    '–∑–∞–¥—ã–º–∏–ª—Å—è',
    '—Å–≥–æ—Ä–µ–ª',
    '–Ω–∞—á–∞–ª –ø—Ä–æ—Ç–µ–∫–∞—Ç—å',
    '–≤—ã–≥–Ω—É–ª–æ—Å—å',
    '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç',
    '–Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è',
    '–Ω–µ –≤–∫–ª—é—á–∏–ª—Å—è',
    '–Ω–µ –æ–ø—É—Å–∫–∞–ª—Å—è',
    '—Å–ª–æ–º–∞–ª–∞—Å—å',
    '–ø–µ—Ä–µ—Å—Ç–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å',
    '—Å–æ–≥–Ω—É–ª–∞—Å—å',
    '–Ω–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç',
    '–Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è',
    '–≤–æ–Ω—è–µ—Ç',
    '–±–∞—Ä–∞—Ö–ª–∏—Ç',
    '–Ω–µ –ø–æ—Å—Ç–∏—Ä–∏–∂–µ—à—å',
    '–Ω–µ –∫—Ä—É—Ç–∏—Ç',
    '–Ω–µ –¥–µ—Ä–∂–∏—Ç',
    '–ø—Ä–æ—Ç–µ–∫–∞–µ—Ç',
    '–Ω–µ –ª—å–µ—Ç—Å—è',
    '–Ω–µ –¥–µ—Ä–∂–∏—Ç',
    '–ø–µ—Ä–µ—Å—Ç–∞–ª –Ω–∞–≥—Ä–µ–≤–∞—Ç—å—Å—è',
    '–Ω–µ —Å–Ω–∏–º–∞–µ—Ç—Å—è',
    '–∑–∞–µ–¥–∞–µ—Ç',
    '–∑–∞—Ä–∂–∞–≤–µ–ª',
    '–ø–æ–≥–Ω—É–ª–∞—Å—å',
    '–Ω–µ –æ—Ç—Ç–∏—Ä–∞–µ—Ç—Å—è',
    '–æ—Ç–æ—Ä–≤–∞–ª–∏',
    '–≤—ã—Ä—É–±–∏–ª—Å—è',
    '–Ω–µ —Ä–µ–∂–µ—Ç',
    '–Ω–µ –Ω–∞–≥—Ä–µ–≤–∞–µ—Ç—Å—è',
    '–Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç',
    '–≤–∏—Å–Ω–µ—Ç',
    '–Ω–µ –≤—ã–ø—Ä—è–º–ª—è–µ—Ç',
    '–ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞–ª–µ—Ç',
    '—Å–ª—ã—à–∏–º–æ—Å—Ç—å –µ–ª–µ –µ–ª–µ',
    '–º—É—Ç–Ω–æ —Å—Ç–∞–ª –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å',
    '–Ω–µ –≤–∞—Ä–∏—Ç',
    '–Ω–µ –≥—Ä–µ–µ—Ç',
    '–ø–ª–∞—Å—Ç–∏–∫ –ø–ª–∞–≤–∏—Ç—Å—è',
    '–∑–∞–≥–æ—Ä–µ–ª–∞—Å—å –æ—à–∏–±–∫–∞',
    '–Ω–µ –≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç',
    '–ø—Ä–∏–ª–∏–ø–∞–µ—Ç',
    '—Ç–µ—Ä—è–µ—Ç',
    '–Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª',
    '—Å—Ç–∞–ª –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è',
    '–æ—Ç–≤–∞–ª–∏–ª–∞—Å—å',
    '–ø–µ—Ä–µ—Å—Ç–∞–ª–∞',
    '–Ω–µ –ø—Ä–∏–ª–µ–≥–∞—é—Ç',
    '–∑–∞—Ç–∞—Ä–∞—Ö—Ç–µ–ª',
    '–Ω–µ –ø—Ä–∏–ª–æ–∂–∏–ª–∏',
    '–æ–ø–ª–∞–≤–∏–ª–æ—Å—å',
    '–æ–ø–ª–∞–≤–∏–ª–∞—Å—å',
    '–Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è',
    '–ø–æ—è–≤–∏–ª—Å—è —Ç—Ä–µ—Å–∫',
    '–∑–∞–≤–æ–Ω—è–ª–æ',
    '–∑–∞–≤–æ–Ω—è–ª–∞',
    '–Ω–µ —Ä–∞–±–æ—Ç–∞–ª–æ',
    '–Ω–µ —Ä–∞–±–æ—Ç–∞–ª',
    '–Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞',
    '–Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∏',
    '–Ω–µ –º–µ–Ω—è–µ—Ç',
    '–Ω–µ –æ—á–∏—â–∞–µ—Ç',
    '–Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
    '–±—ã—Å—Ç—Ä–æ —Å–∞–¥–∏—Ç—Å—è',
    '–Ω–∞—á–∞–ª —Ç—Ä–µ—Å–∫–∞—Ç—å—Å—è',

    '–ø–æ–º—è—Ç—ã–π',
    '–ø–æ–º—è—Ç–∞—è',
    '–≤–º—è—Ç–∏–Ω–∞',
    '—Ü–∞—Ä–∞–ø–∏–Ω–∞',
    '–ø–æ—Ü–∞—Ä–∞–ø–∞–Ω–Ω—ã–π',
    '—Å–∫–æ–ª',
    '—Å–∫–æ–ª–∞–º–∏',
    '–æ—Ç–∫–æ–ª–æ—Ç–∞—è',
    '—Ç—Ä–µ—â–∏–Ω–∞',
    '–æ—Ç–∫–æ–ª–æ—Ç—ã–π',
    '—Ä–∞–∑–ª–æ–º–∞–Ω',
    '—Ä–∞–∑–±–∏–ª–∏',
    '–±–∏—Ç–∞—è',
    '—Å–ª–∞–±–µ–Ω—å–∫–∏–π',
    '–ø–æ–¥—Ç–µ–∫–∞—Ç—å',
    '–ø—Ä–∏—à–µ–ª –±—Ä–∞–∫',
    '—è–≤–Ω—ã–π –±—Ä–∞–∫',
    '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –±—Ä–∞–∫',
    '–±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–π',
    '—ç—Ç–æ –±—Ä–∞–∫',
    '—Å –±—Ä–∞–∫–æ–º',
    '–±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è',
    '–∫—Ä–∏–≤–æ–π',
    '–∫–æ—Å–∞—è',
    '–≥–Ω—É—Ç–∞—è',
    '–ø–ª–æ—Ö–æ–≤–∞—Ç–æ',
    '–Ω–µ —Ä–∞–±–æ—á–∏–π',
    '–Ω–µ—Ä–∞–±–æ—á–∏–π',
    '–Ω–µ—Ä–∞–±–æ—á–µ–º',
    '–Ω–µ—Ä–∞–±–æ—á–∞—è',
    '—Å–ª–æ–º–∞–Ω–Ω–∞—è',
    '—Å–ª–æ–º–∞–Ω–∞—è',
    '–≤–¥—Ä–µ–±–µ–∑–≥–∏',
    '—Ä–∞–∑–±–∏—Ç—ã–π',
    '–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
    '–Ω–µ —É–¥–æ–±–Ω–∞—è',
    '–Ω–µ—É–¥–æ–±–Ω–∞—è',
    '–Ω–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è',
    '–Ω–µ—Ç –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞',
    '–Ω–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è',
    '—É—Å—Ç–∞–ª –Ω–∞–≤—Å–µ–≥–¥–∞',
    '–Ω–∞—Ä—É—à–µ–Ω–∞',
    '–ø–∞—Ä–∞ –Ω–µ—Ç',

    '–Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª',
    '–ø–æ–¥–¥–µ–ª–∫–∞',
    '–∫–æ–Ω—Ç—Ä–∞—Ñ–∞–∫—Ç',
    '–ø–∞–ª—å',
    '–Ω–µ —Ç–µ—Ñ–∞–ª—å',
    '–Ω–µ tefal',
    '–Ω–µ fiskars',
]


#NEGATIVE_KEY_PHRASES = []

def contains_negative_phrase(text):
    text_lower = text.lower()
    found, matches = is_fuzzy_match_with_details(text_lower, NEGATIVE_KEY_PHRASES)
    return found, matches


def predict_sentiment(text_list):
    inputs = tokenizer(
        text_list, padding=True, truncation=True, max_length=512, return_tensors="pt"
    )
    if torch.cuda.is_available():
        inputs = {k: v.to("cuda") for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model(**inputs)
    logits = outputs.logits
    probs = torch.softmax(logits, dim=1).cpu().numpy()
    return probs


@pipeline_step(step_number=9, step_name="–ì–ò–ë–†–ò–î–ù–´–ô –ü–û–ò–°–ö –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–• –û–¢–ó–´–í–û–í ‚Üí [202]")
def classifier_202(df, stop_pipeline_flag=False, positive_threshold=0.9, neutral_threshold=0.9, step_number=9):
    """
    –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å [202], –µ—Å–ª–∏ –æ—Ç–∑—ã–≤ –∏–º–µ–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã—à–µ –ø–æ—Ä–æ–≥–æ–≤,
    –∏ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ (—Å —É—á—ë—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫).
    """

    if stop_pipeline_flag:
        logger.warning(f"üîö [{step_number}] –®–∞–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return df

    if df is None or df.empty:
        logger.warning(f"üü° [{step_number}] –í—Ö–æ–¥–Ω–æ–π DataFrame –ø—É—Å—Ç–æ–π –∏–ª–∏ None")
        return df

    if "–û—Ç–∑—ã–≤" not in df.columns or "–ö–ª–∞—Å—Å" not in df.columns:
        logger.error(f"‚ùå [{step_number}] –í—Ö–æ–¥–Ω–æ–π DataFrame –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ '–û—Ç–∑—ã–≤' –∏ '–ö–ª–∞—Å—Å'")
        return df

    if "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ" not in df.columns:
        df["–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"] = ""

    # –°–æ–∑–¥–∞—ë–º / –æ–±–Ω—É–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    if 'prob_positive_202' not in df.columns:
        df['prob_positive_202'] = pd.NA
    if 'prob_neutral_202' not in df.columns:
        df['prob_neutral_202'] = pd.NA

    def has_ignored_class(classes):
        if isinstance(classes, list):
            return FILTERED_OUT_CLASS in classes or CLASS_100 in classes
        return classes == FILTERED_OUT_CLASS or classes == CLASS_100

    df_to_process = df[~df["–ö–ª–∞—Å—Å"].apply(has_ignored_class)].copy()
    if df_to_process.empty:
        logger.info(f"‚ÑπÔ∏è [{step_number}] –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º")
        return df

    found_count = 0
    detected_positive_reviews = []

    batch_size = 32
    reviews = df_to_process["–û—Ç–∑—ã–≤"].astype(str).tolist()
    indices = df_to_process.index.tolist()

    for start_idx in tqdm(
        range(0, len(reviews), batch_size),
        desc=f"üîé [{step_number}] –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ [202]",
    ):
        batch_reviews = reviews[start_idx : start_idx + batch_size]
        batch_indices = indices[start_idx : start_idx + batch_size]
        probs = predict_sentiment(batch_reviews)

        for idx_in_batch, prob in enumerate(probs):
            negative_prob = prob[0]
            neutral_prob = prob[1]
            positive_prob = prob[2]

            idx_df = batch_indices[idx_in_batch]
            text = df.at[idx_df, "–û—Ç–∑—ã–≤"]

            found_neg, neg_matches = contains_negative_phrase(text)

            if (positive_prob >= positive_threshold or neutral_prob >= neutral_threshold) and not found_neg:
                df = set_class(df, idx_df, code=202)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ DataFrame –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                df.at[idx_df, 'prob_positive_202'] = positive_prob
                df.at[idx_df, 'prob_neutral_202'] = neutral_prob

                old_note = df.at[idx_df, "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"]
                new_note = (
                    f"{old_note} | –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ "
                    f"(–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å pos={positive_prob:.2f}, neu={neutral_prob:.2f})"
                ) if old_note else f"–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å pos={positive_prob:.2f}, neu={neutral_prob:.2f})"
                df.at[idx_df, "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"] = new_note

                found_count += 1
                detected_positive_reviews.append(
                    {
                        "–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏": idx_df,
                        "–û—Ç–∑—ã–≤": text,
                        "–ü—Ä–æ–¥–∞–≤–µ—Ü": df.at[idx_df, "–ü—Ä–æ–¥–∞–≤–µ—Ü"] if "–ü—Ä–æ–¥–∞–≤–µ—Ü" in df.columns else "",
                        "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏": positive_prob,
                        "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏": neutral_prob,
                        "–ù–∞–π–¥–µ–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑": neg_matches,
                    }
                )

    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è NaN (pd.NA) –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    for col in ['prob_positive_202', 'prob_neutral_202']:
        if col in df.columns:
            df[col] = df[col].apply(lambda x: '' if pd.isna(x) else x)

    logger.info(
        f"‚úÖ [{step_number}] –ù–∞–π–¥–µ–Ω–æ {found_count} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (–≥–∏–±—Ä–∏–¥–Ω—ã–π –º–µ—Ç–æ–¥). –ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å [202]"
    )

    if SAVE_STEP_9_RESULT and found_count > 0:
        output_file = os.path.join(PROCESSED_DIR, f"step_{step_number}_positive_reviews_{TIMESTAMP}.xlsx")
        try:
            df.to_excel(output_file, index=False)
            logger.info(f"üìå [{step_number}] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_file}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [{step_number}] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç classifier_202: {e}")

        details_file = os.path.join(PROCESSED_DIR, f"step_{step_number}_positive_reviews_details_{TIMESTAMP}.xlsx")
        try:
            pd.DataFrame(detected_positive_reviews).to_excel(details_file, index=False)
            logger.info(f"üìÅ [{step_number}] –î–µ—Ç–∞–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {details_file}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è[{step_number}] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ classifier_202: {e}")

        try:
            stats = class_statistics(df)
            logger.info(f"\nüìä [{step_number}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º –ø–æ—Å–ª–µ classifier_202:\n")
            logger.info(stats.to_string(index=False))
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è[{step_number}] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚Äî {e}")

    return df
