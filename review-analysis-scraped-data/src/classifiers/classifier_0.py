# src/classifiers/classifier_0.py

import logging
import pandas as pd
from decorators import pipeline_step
from config import logger, NEGATIV_LEVEL, FILTERED_OUT_CLASS
from utils import set_class
import warnings

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç openpyxl
warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")

logger = logging.getLogger('pipeline')

@pipeline_step(step_number=2, step_name="–ù–ê–ß–ê–õ–¨–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø")
def classifier_0(df, stop_pipeline_flag=False, step_number=2):
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–æ–ª–æ–Ω–∫–∏ '–ö–ª–∞—Å—Å' –∏ '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'.
    –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
      - –∫–ª–∞—Å—Å 999 (FILTERED_OUT_CLASS) –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ —Å –æ—Ü–µ–Ω–∫–æ–π > NEGATIV_LEVEL,
      - –∫–ª–∞—Å—Å 0 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.
    """

    if stop_pipeline_flag:
        logger.warning(f"üîö [{step_number}] –®–∞–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return df

    if df is None:
        logger.error(f"‚ùå [{step_number}] –í—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Ä–∞–≤–µ–Ω None")
        return df

    df = df.copy()

    # –ü—Ä–∏–≤–æ–¥–∏–º '–û—Ü–µ–Ω–∫–∞' –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if '–û—Ü–µ–Ω–∫–∞' in df.columns:
        df['–û—Ü–µ–Ω–∫–∞'] = pd.to_numeric(df['–û—Ü–µ–Ω–∫–∞'], errors='coerce')
    else:
        logger.warning(f"‚ö†Ô∏è [{step_number}] –í –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ '–û—Ü–µ–Ω–∫–∞' ‚Äî –≤—Å–µ –æ—Ç–∑—ã–≤—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–ª–∞—Å—Å–æ–º 0")
        df['–û—Ü–µ–Ω–∫–∞'] = pd.NA

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
    # –í '–ö–ª–∞—Å—Å' ‚Äî —Å–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
    def initial_class(row):
        if pd.isna(row['–û—Ü–µ–Ω–∫–∞']):
            # –û—Ü–µ–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º (0)
            return [0]
        elif row['–û—Ü–µ–Ω–∫–∞'] > NEGATIV_LEVEL:
            return [FILTERED_OUT_CLASS]
        else:
            return [0]

    df['–ö–ª–∞—Å—Å'] = df.apply(initial_class, axis=1)
    df['–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'] = ''

    # –î–æ–±–∞–≤–∏–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º
    filtered_mask = df['–ö–ª–∞—Å—Å'].apply(lambda cl: FILTERED_OUT_CLASS in cl)
    df.loc[filtered_mask, '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'] = "–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø–æ —É—Ä–æ–≤–Ω—é –æ—Ü–µ–Ω–∫–∏"

    logger.info(f"üìå [{step_number}] –ù–∞—á–∞–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {filtered_mask.sum()} –æ—Ç–∑—ã–≤–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º {FILTERED_OUT_CLASS}")

    return df
